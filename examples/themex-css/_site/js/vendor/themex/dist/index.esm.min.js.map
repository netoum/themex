{
  "version": 3,
  "sources": ["../src/themex.ts"],
  "sourcesContent": ["type ThemexKey = string;\ntype ThemexValue = string;\ninterface ThemexOptions {\n  key: ThemexKey;\n  default: ThemexValue;\n  values: ThemexValue[];\n}\nclass Themex {\n  private options: ThemexOptions[];\n  constructor(options: ThemexOptions[]) {\n    this.options = options;\n    if (document.readyState === 'loading') {\n      document.addEventListener('DOMContentLoaded', () => {\n        this.initializeThemex();\n        this.setupEventListeners();\n      });\n    } else {\n      this.initializeThemex();\n      this.setupEventListeners();\n    }\n  }\n  private initializeThemex(): void {\n    this.options.forEach(({ key, default: defaultValue }) => {\n      const savedValue = localStorage.getItem(key);\n      const value = savedValue || defaultValue;\n      this.applyThemex(key, value);\n      this.updateUI(key, value);\n    });\n  }\n  private setupEventListeners(): void {\n    document.querySelectorAll<HTMLButtonElement>('button[data-themex-key]').forEach(button => {\n      button.addEventListener('click', (e) => {\n        e.preventDefault();\n        const target = e.currentTarget as HTMLButtonElement;\n        const key = target.dataset.themexKey as ThemexKey;\n        const value = target.dataset.themexValue as ThemexValue;\n        this.applyThemex(key, value);\n        this.updateUI(key, value);\n      });\n    });\n    document.querySelectorAll<HTMLButtonElement>('div[role=\"button\"][data-themex-key]').forEach(button => {\n      button.addEventListener('click', (e) => {\n        e.preventDefault();\n        const target = e.currentTarget as HTMLButtonElement;\n        const key = target.dataset.themexKey as ThemexKey;\n        const value = target.dataset.themexValue as ThemexValue;\n        this.applyThemex(key, value);\n        this.updateUI(key, value);\n      });\n    });\n    document.querySelectorAll<HTMLSelectElement>('select[data-themex-key]').forEach(select => {\n      select.addEventListener('change', (e) => {\n        const target = e.target as HTMLSelectElement;\n        const key = target.dataset.themexKey as string;\n        const value = target.value as ThemexValue;\n        this.applyThemex(key, value);\n        this.updateUI(key, value);\n      });\n    });\n    document.querySelectorAll<HTMLLinkElement>('a[data-themex-key]').forEach(link => {\n      link.addEventListener('click', (e) => {\n        e.preventDefault();\n        const target = e.currentTarget as HTMLLinkElement;\n        const key = target.dataset.themexKey as ThemexKey;\n        const value = target.dataset.themexValue as string;\n        this.applyThemex(key, value);\n        this.updateUI(key, value);\n      });\n    });\n    document.querySelectorAll<HTMLInputElement>('input[type=\"checkbox\"][data-themex-key]').forEach(toggle => {\n      toggle.addEventListener('change', (e) => {\n        const target = e.target as HTMLInputElement;\n        const key = target.dataset.themexKey as ThemexKey;\n        const [onValue, offValue] = (target.dataset.themexValue || '').split(',');\n        const value = target.checked ? onValue : offValue;\n        this.applyThemex(key, value);\n        this.updateUI(key, value);\n      });\n    });\n    document.querySelectorAll<HTMLInputElement>('input[type=\"radio\"][data-themex-key]').forEach(radio => {\n      radio.addEventListener('change', (e) => {\n        const target = e.target as HTMLInputElement;\n        const key = target.dataset.themexKey as ThemexKey;\n        const value = target.dataset.themexValue as string;\n        if (target.checked) {\n          this.applyThemex(key, value);\n          this.updateUI(key, value);\n        }\n      });\n    });\n    document.querySelectorAll<HTMLInputElement>('input[type=\"range\"][data-themex-key]').forEach(range => {\n      range.addEventListener('change', (e) => {\n        const target = e.target as HTMLInputElement;\n        const key = target.dataset.themexKey as ThemexKey;\n        const value = target.value;\n        this.applyThemex(key, value);\n        this.updateUI(key, value);\n      });\n    });\n  }\n  private applyThemex(key: ThemexKey, value: ThemexValue): void {\n    localStorage.setItem(key, value);\n    document.documentElement.setAttribute(`data-${key}`, value);\n  }\n  private updateUI(key: ThemexKey, value: ThemexValue): void {\n    document.querySelectorAll<HTMLButtonElement>(`button[data-themex-key=\"${key}\"][set]`)\n      .forEach(button => {\n        const buttonValue = button.dataset.themexValue as ThemexValue;\n        const isSelected = buttonValue === value;\n        button.setAttribute('aria-current', isSelected.toString());\n      });\n    document.querySelectorAll<HTMLButtonElement>(`div[role=\"button\"][data-themex-key=\"${key}\"][set]`)\n      .forEach(button => {\n        const buttonValue = button.dataset.themexValue as ThemexValue;\n        const isSelected = buttonValue === value;\n        button.setAttribute('aria-current', isSelected.toString());\n      });\n    document.querySelectorAll<HTMLButtonElement>(`button[data-themex-key=\"${key}\"][toggle]`)\n      .forEach(button => {\n        const buttonValue = button.dataset.themexValue as ThemexValue;\n        const isSelected = buttonValue === value;\n        button.setAttribute('aria-pressed', isSelected.toString());\n      });\n    document.querySelectorAll<HTMLButtonElement>(`div[role=\"button\"][data-themex-key=\"${key}\"][toggle]`)\n      .forEach(button => {\n        const buttonValue = button.dataset.themexValue as ThemexValue;\n        const isSelected = buttonValue === value;\n        button.setAttribute('aria-pressed', isSelected.toString());\n      });\n      document.querySelectorAll<HTMLSelectElement>(`select[data-themex-key=\"${key}\"]`)\n      .forEach(select => {\n        select.value = value;\n    \n        select.querySelectorAll(\"option\").forEach(option => {\n          option.removeAttribute(\"data-selected\");\n        });\n    \n        const selectedOption = select.querySelector(`option[value=\"${value}\"]`);\n        if (selectedOption) {\n          selectedOption.setAttribute(\"data-selected\", \"true\");\n        }\n      });\n    \n    document.querySelectorAll<HTMLInputElement>(`input[type=\"checkbox\"][data-themex-key=\"${key}\"]`)\n      .forEach(toggle => {\n        const [onValue] = (toggle.dataset.themexValue || '').split(',');\n        toggle.checked = value === onValue;\n      });\n\n    document.querySelectorAll<HTMLInputElement>(`input[type=\"radio\"][data-themex-key=\"${key}\"]`)\n      .forEach(radio => {\n        const radioValue = radio.dataset.themexValue as ThemexValue;\n        radio.checked = radioValue === value;\n      });\n    document.querySelectorAll<HTMLInputElement>(`input[type=\"range\"][data-themex-key=\"${key}\"]`)\n      .forEach(range => {\n        range.value = value;\n      });\n  }\n}\nexport default Themex;"],
  "mappings": "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",
  "names": ["Themex", "options", "key", "defaultValue", "value", "button", "e", "target", "select", "link", "toggle", "onValue", "offValue", "radio", "range", "isSelected", "option", "selectedOption", "radioValue", "themex_default"]
}
