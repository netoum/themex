{
  "version": 3,
  "sources": ["../src/index.ts", "../src/themex.ts"],
  "sourcesContent": ["export { default as Themex } from './themex.ts';\nexport * from './types.ts';\n", "type ThemexKey = string;\ntype ThemexValue = string;\ninterface ThemexOptions {\n  key: ThemexKey;\n  default?: ThemexValue;\n  values: ThemexValue[];\n}\nclass Themex {\n  private options: ThemexOptions[];\n  constructor(options: ThemexOptions[]) {\n    this.options = options;\n    if (document.readyState === 'loading') {\n      document.addEventListener('DOMContentLoaded', () => {\n        this.initializeThemex();\n        this.setupEventListeners();\n      });\n    } else {\n      this.initializeThemex();\n      this.setupEventListeners();\n    }\n  }\n  private getDefaultValue(key: ThemexKey): ThemexValue | undefined {\n    const option = this.options.find(opt => opt.key === key);\n    return option?.default;\n  }\n  private initializeThemex(): void {\n    this.options.forEach(({ key, default: defaultValue }) => {\n      const savedValue = localStorage.getItem(key);\n      console.log(savedValue)\n      const value = savedValue || defaultValue;\n      if (value) {\n        this.applyThemex(key, value);\n        this.updateUI(key, value);\n      }\n    });\n  }\n  private setupEventListeners(): void {\n    document.querySelectorAll<HTMLInputElement>('input[type=\"checkbox\"][data-themex-key][data-themex-value]').forEach(input => {\n      input.addEventListener('change', (e) => {\n        const target = e.target as HTMLInputElement;\n        const key = target.dataset.themexKey;\n        const value = target.dataset.themexValue;\n        if (key && value) {\n          if (target.checked) {\n            this.applyThemex(key, value);\n            this.updateUI(key, value);\n          } else {\n            const defaultValue = this.getDefaultValue(key);\n            if (defaultValue) {\n              this.applyThemex(key, defaultValue);\n              this.updateUI(key, defaultValue);\n            } else {\n              this.removeThemex(key);\n              this.updateUI(key, '');\n            }\n          }\n        }\n      });\n    });\n    document.querySelectorAll<HTMLLabelElement>('label[data-themex-key]').forEach(label => {\n      label.addEventListener('change', (e) => {\n        const key = label.dataset.themexKey;\n        const value = label.dataset.themexValue;\n        label.querySelectorAll<HTMLInputElement>('input[type=\"checkbox\"]').forEach(input => {\n        if (key && value) {\n          if (input.checked) {\n            this.applyThemex(key, value);\n            this.updateUI(key, value);\n          } else {\n            const defaultValue = this.getDefaultValue(key);\n            if (defaultValue) {\n              this.applyThemex(key, defaultValue);\n              this.updateUI(key, defaultValue);\n            } else {\n              this.removeThemex(key);\n              this.updateUI(key, '');\n            }\n          }\n        }\n      });\n    });\n    });\n    \n    document.querySelectorAll<HTMLSelectElement>('select[data-themex-key]').forEach(select => {\n      select.addEventListener('change', (e) => {\n        const target = e.target as HTMLSelectElement;\n        const key = target.dataset.themexKey as string;\n        const value = target.value as ThemexValue;\n        this.applyThemex(key, value);\n        this.updateUI(key, value);\n      });\n    });\n    // Handle buttons\n    document.querySelectorAll<HTMLButtonElement>('button[data-themex-key]').forEach(button => {\n      button.addEventListener('click', (e) => {\n        const target = e.currentTarget as HTMLButtonElement;\n        const key = target.dataset.themexKey as ThemexKey;\n        const value = target.dataset.themexValue;\n        if (value) {\n          this.applyThemex(key, value);\n          this.updateUI(key, value);\n        }\n      });\n    });\n    // Handle div buttons\n    document.querySelectorAll<HTMLButtonElement>('div[role=\"button\"][data-themex-key]').forEach(button => {\n      button.addEventListener('click', (e) => {\n        const target = e.currentTarget as HTMLButtonElement;\n        const key = target.dataset.themexKey as ThemexKey;\n        const value = target.dataset.themexValue;\n        if (value) {\n          this.applyThemex(key, value);\n          this.updateUI(key, value);\n        }\n      });\n    });\n    // Handle links\n    document.querySelectorAll<HTMLLinkElement>('a[data-themex-key]').forEach(link => {\n      link.addEventListener('click', (e) => {\n        const target = e.currentTarget as HTMLLinkElement;\n        const key = target.dataset.themexKey;\n        const value = target.dataset.themexValue;\n        if (key && value) {\n          this.applyThemex(key, value);\n          this.updateUI(key, value);\n        }\n      });\n    });\n    // Handle radio buttons\n    document.querySelectorAll<HTMLInputElement>('input[type=\"radio\"][data-themex-key]').forEach(radio => {\n      radio.addEventListener('change', (e) => {\n        const target = e.target as HTMLInputElement;\n        const key = target.dataset.themexKey;\n        const value = target.dataset.themexValue;\n        if (target.checked && key && value) {\n          this.applyThemex(key, value);\n          this.updateUI(key, value);\n        }\n      });\n    });\n    // Handle range inputs\n    document.querySelectorAll<HTMLInputElement>('input[type=\"range\"][data-themex-key]').forEach(range => {\n      range.addEventListener('change', (e) => {\n        const target = e.target as HTMLInputElement;\n        const key = target.dataset.themexKey;\n        if (key) {\n          const value = target.value;\n          this.applyThemex(key, value);\n          this.updateUI(key, value);\n        }\n      });\n    });\n  }\n  private applyThemex(key: ThemexKey, value: ThemexValue): void {\n    localStorage.setItem(key, value);\n    document.documentElement.setAttribute(`data-${key}`, value);\n  }\n  private removeThemex(key: ThemexKey): void {\n    localStorage.removeItem(key);\n    document.documentElement.removeAttribute(`data-${key}`);\n  }\n  private updateUI(key: ThemexKey, value: ThemexValue): void {\n    document.querySelectorAll<HTMLInputElement>(`input[type=\"checkbox\"][data-themex-key=\"${key}\"]`)\n      .forEach(input => {\n        const inputValue = input.dataset.themexValue;\n        if (inputValue) {\n          input.checked = value === inputValue;\n        }\n      });\n      document.querySelectorAll<HTMLLabelElement>(`label[data-themex-key=\"${key}\"]`)\n      .forEach(label => {\n        const labelValue = label.dataset.themexValue;\n        label.querySelectorAll<HTMLInputElement>('input[type=\"checkbox\"]').forEach(input => {\n        if (labelValue) {\n          input.checked = value === labelValue;\n        }\n      });\n    });\n        document.querySelectorAll<HTMLButtonElement>(`button[data-themex-key=\"${key}\"][set]`)\n      .forEach(button => {\n        const buttonValue = button.dataset.themexValue;\n        const isSelected = buttonValue === value;\n        button.setAttribute('aria-current', isSelected.toString());\n      });\n    document.querySelectorAll<HTMLButtonElement>(`div[role=\"button\"][data-themex-key=\"${key}\"][set]`)\n      .forEach(button => {\n        const buttonValue = button.dataset.themexValue;\n        const isSelected = buttonValue === value;\n        button.setAttribute('aria-current', isSelected.toString());\n      });\n    document.querySelectorAll<HTMLButtonElement>(`button[data-themex-key=\"${key}\"][toggle]`)\n      .forEach(button => {\n        const buttonValue = button.dataset.themexValue;\n        const isSelected = buttonValue === value;\n        button.setAttribute('aria-pressed', isSelected.toString());\n      });\n    document.querySelectorAll<HTMLButtonElement>(`div[role=\"button\"][data-themex-key=\"${key}\"][toggle]`)\n      .forEach(button => {\n        const buttonValue = button.dataset.themexValue;\n        const isSelected = buttonValue === value;\n        button.setAttribute('aria-pressed', isSelected.toString());\n      });\n    // Update select elements\n    document.querySelectorAll<HTMLSelectElement>(`select[data-themex-key=\"${key}\"]`)\n      .forEach(select => {\n        select.value = value;\n        select.querySelectorAll(\"option\").forEach(option => {\n          option.removeAttribute(\"data-selected\");\n        });\n        const selectedOption = select.querySelector(`option[value=\"${value}\"]`);\n        if (selectedOption) {\n          selectedOption.setAttribute(\"data-selected\", \"true\");\n        }\n      });\n    document.querySelectorAll<HTMLInputElement>(`input[type=\"radio\"][data-themex-key=\"${key}\"]`)\n      .forEach(radio => {\n        const radioValue = radio.dataset.themexValue;\n        if (radioValue) {\n          radio.checked = radioValue === value;\n        }\n      });\n    document.querySelectorAll<HTMLInputElement>(`input[type=\"range\"][data-themex-key=\"${key}\"]`)\n      .forEach(range => {\n        range.value = value;\n      });\n  }\n}\nexport default Themex;"],
  "mappings": "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",
  "names": ["index_exports", "__export", "themex_default", "__toCommonJS", "Themex", "options", "key", "opt", "defaultValue", "savedValue", "value", "input", "e", "target", "label", "select", "button", "link", "radio", "range", "inputValue", "labelValue", "isSelected", "option", "selectedOption", "radioValue", "themex_default"]
}
